import { Prepend } from 'ts-toolbelt/out/List/Prepend';
import { Pos } from 'ts-toolbelt/out/Iteration/Pos';
import { Next } from 'ts-toolbelt/out/Iteration/Next';
import { Length } from 'ts-toolbelt/out/List/Length';
import { IterationOf } from 'ts-toolbelt/out/Iteration/IterationOf';
import { Iteration } from 'ts-toolbelt/out/Iteration/Iteration';
import { Cast } from 'ts-toolbelt/out/Any/Cast';
import { List } from 'ts-toolbelt/out/List/List';
import { Naked } from 'ts-toolbelt/out/List/_Internal';
import { Extends } from 'ts-toolbelt/out/Any/Extends';
/**
 * @hidden
 */
declare type __Reverse<L extends List, LO extends List, I extends Iteration = IterationOf<0>> = {
    0: __Reverse<L, Prepend<LO, L[Pos<I>]>, Next<I>>;
    1: LO;
}[Extends<Pos<I>, Length<L>>];
/**
 * @hidden
 */
export declare type _Reverse<L extends List, LO extends List = []> = __Reverse<Naked<L>, LO> extends infer X ? Cast<X, List> : never;
/**
 * Turn a [[List]] the other way around
 * @param L to reverse
 * @param LO (?=`[]`) to prepend to
 * @returns [[List]]
 * @example
 * ```ts
 * ```
 */
export declare type Reverse<L extends List> = L extends unknown ? _Reverse<L> : never;
export {};
