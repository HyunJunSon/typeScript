import { Replace } from 'ts-toolbelt/out/Union/Replace';
import { x } from 'ts-toolbelt/out/Any/x';
import { List } from 'ts-toolbelt/out/List/List';
import { Cast } from 'ts-toolbelt/out/Any/Cast';
import { At } from 'ts-toolbelt/out/Any/At';
/**
 * Modify `L` with `LMod` & the [[x]] placeholder
 * @param L to copy from
 * @param LMod to copy to
 * @returns [[List]]
 * @example
 * ```ts
 * ```
 */
export declare type Modify<L extends List, LMod extends List> = Cast<{
    [K in keyof LMod]: Replace<LMod[K], x, Exclude<At<L, K>, undefined>>;
}, List>;
