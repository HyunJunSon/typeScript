import { Match } from 'ts-toolbelt/out/Any/_Internal';
import { ListOf } from 'ts-toolbelt/out/Object/ListOf';
import { Exclude as OExclude } from 'ts-toolbelt/out/Object/Exclude';
import { ObjectOf } from 'ts-toolbelt/out/List/ObjectOf';
import { List } from 'ts-toolbelt/out/List/List';
/**
 * Exclude the entries of `L1` out of `L`
 * (If `match = 'default'`, no type checks are done)
 * @param L to remove from
 * @param L1 to remove out
 * @param match (?=`'default'`) to change precision
 * @returns [[List]]
 * @example
 * ```ts
 * ```
 */
export declare type Exclude<L extends List, L1 extends List, match extends Match = 'default'> = ListOf<OExclude<ObjectOf<L>, ObjectOf<L1>, match>>;
