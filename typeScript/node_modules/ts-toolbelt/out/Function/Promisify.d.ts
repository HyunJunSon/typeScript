import { Function } from 'ts-toolbelt/out/Function/Function';
import { Parameters } from 'ts-toolbelt/out/Function/Parameters';
import { Return } from 'ts-toolbelt/out/Function/Return';
import { Promise } from 'ts-toolbelt/out/Any/Promise';
/**
 * Creates a promisified version of a `Function` `F`
 * @param F to promisify
 * @returns async F
 * @example
 * ```ts
 * import {F} from 'ts-toolbelt'
 *
 * type test0 = F.Promisify<(a: number) => number> // (a: number) => Promise<number>
 * ```
 */
export declare type Promisify<F extends Function> = (...args: Parameters<F>) => Promise<Return<F>>;
