import { Key } from 'ts-toolbelt/out/Any/Key';
import { Cast } from 'ts-toolbelt/out/Any/Cast';
import { Extends } from 'ts-toolbelt/out/Any/Extends';
import { Iteration } from 'ts-toolbelt/out/Iteration/Iteration';
import { IterationOf } from 'ts-toolbelt/out/Iteration/IterationOf';
import { Next } from 'ts-toolbelt/out/Iteration/Next';
import { Pos } from 'ts-toolbelt/out/Iteration/Pos';
import { List } from 'ts-toolbelt/out/List/List';
import { Length } from 'ts-toolbelt/out/List/Length';
import { At } from 'ts-toolbelt/out/Any/At';
/**
 * @ignore
 */
declare type _Path<O, P extends List<Key>, I extends Iteration = IterationOf<0>> = {
    0: _Path<At<O, P[Pos<I>]>, P, Next<I>>;
    1: O;
}[Extends<Pos<I>, Length<P>>];
/**
 * Get in `O` the type of nested properties
 * @param O to be inspected
 * @param Path to be followed
 * @returns [[Any]]
 * @example
 * ```ts
 * ```
 */
export declare type Path<O extends any, P extends List<Key>> = _Path<O & {}, P> extends infer X ? Cast<X, any> : never;
export {};
